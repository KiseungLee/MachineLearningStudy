안녕하십니까? 서울대학교 컴퓨터공학부의 김건희입니다. 오늘은 인공지능의 기초 자연어 처리에 대해서 말씀을 드리도록 하겠습니다.
자연어 처리라는 분야는 인공지능 중에 언어지능에 대한 내용입니다. 그러니까 사람이 사용하는 언어를 기계도 이해하고 같이 활용하고 사용할 수 있도록 하는 학문이라고 보시면 되겠고요.
사실 자연어 처리를 인공지능의 하위 분야라고 단순히 말하기에는 자연어 처리라는 분야 자체가 요즘은 아주 큰 분야가 되고 있습니다.
그래서 다른 인공지능의 분야 그 이상이 될 수 있을 정도로 자연어 처리 그 자체로도 아주 큰 분야라고 이해하시면 되겠고요.
그래서 오늘 강연은 한 시간 안에 자연어 처리에 대해서 완벽히 말씀드리는 건 좀 어려울 것 같고,
자연어 처리라는 작업이 무엇인지 그리고 여러분이 이걸 한번 알아보시면서 흥미가 생긴다면 더 깊이 알아보는 기회가 될 수 있도록 활용하시면 좋을 것 같습니다.
첫 번째로 Reference, 그러니까 여러분이 참고할 만한 자료에 대해서 말씀을 드리도록 하겠습니다.
해외의 여러 대학들 중에 스탠포드대학이라는 곳이 자연어 처리 분야에서 선두주자 중 하나입니다.
그 중에서도 특히 Jurafsky 교수와 Manning 교수가 함께 가르친 자연어 처리 클래스가 있는데요. 그거에 대한 슬라이드는 온라인상에서 쉽게 찾아볼 수 있습니다.
그래서 만약에 여러분이 이 분야에 좀 더 관심이 있다면 이 강연을 한번 찾아보시는 것도 좋을 것 같고요. 이거 외에도 아주 다양한 강의가 온라인상에 존재합니다.
그리고 책으로는 이 두 가지 책이 가장 유명하다고 말씀드릴 수 있겠고요. 좀 전에 설명 드린 교수님 두 분께서 직접 저술하신 책입니다.
한편으로 보면 책이 처음 나온 지는 좀 시간이 지났기 때문에 근래에 딥러닝 기반으로 자연어 처리를 많이 수행하는데,
그것에 대한 부분은 누락되어 있을 수도 있긴 하지만 자연어 처리의 기초를 다지는 데는 아주 뛰어난 책입니다.
그리고 최근 딥러닝과 함께 자연어 처리가 어떻게 발전됐는지 여러 논문이나 그 외에 여러 강연 자료를 통해서 참조하시면 더 좋을 것 같은 생각이 듭니다.
그러면 자연어 처리에 대한 여러 가지 기술들에 대해서 아주 간략하게 소개를 시켜드리도록 하겠습니다.
왼쪽부터 오른쪽까지 쉬운, 그나마 많이 풀린 문제부터 아주 어려운 문제까지 여러 가지가 기술되어 있는데요.
많이 풀린 문제는 Spam detection이라고 스팸메일을 걸러주는 기능입니다. 물론 이 기능이 아직도 완벽하다고 할 수 없지만, 그래도 많은 부분 잘 구현이 되어 있고요.
그다음에 두 번째로 나와 있는 게 Part-of-speech, POS라고 줄여서 얘기하는데요. 그건 각 단어의 품사를 알아내는 것입니다. 이것에 대한 구체적인 내용은 뒤에 다시 소개시켜드리도록 하겠습니다.
그리고 그 밑에는 NER이라고 약자로 많이 쓰는데요. 명사들 중에 고유명사들이 있습니다. 그러니까 사람 이름, 단체 이름을 문장 안에서 찾아내는 게 NER이라고 얘기를 많이 하고 있습니다.
그리고 어떤 문장이 주어졌을 때 문장에 대한 감정이 좋은 감정인지 나쁜 감정인지를 알아내는 걸 Sentiment analysis라고 얘기하고요.
이건 아주 완벽히 풀리진 않았지만 그래도 많은 progress를 보이는 작업이라고 할 수 있겠고요.
그다음에 Coreference resolution은 지시대명사입니다. 그러니까 ‘그는’ 혹은 ‘이것을’ 이런 식의 지시대명사가 앞에 문장이나 단어들 중에 뭘 의미하는지를 찾아내는 과정이고요.
그다음에 WSD(Word sense disambiguation)라는 건 뭐냐 하면, 어떤 단어가 어떤 의미로 쓰였는지를 찾아내는 과정입니다.
이 예에서는 mouse가 컴퓨터 부품으로서의 mouse인지 아니면 쥐를 나타내는지를 얘기하고 있고요.
Parsing이라는 건 문장이 주어졌을 때 이 문장의 구조를 알아내는 것입니다. 그래서 주어, 동사가 있고, 목적어는 이 동사에 종속되어 있고. 이런 것들을 찾아내는 과정이고요.
그다음에 번역. 그리고 정보를 뽑아내는, 그러니까 예를 들어서 어떤 회사에 대한 보고서가 있다고 했을 때 자연어로 쓰인 보고서를 테이블 형태,
그러니까 회사의 위치, 회사의 revenue 이런 식으로 구조화된 정보를 뽑아내는 걸 Information extraction이라고 하고요.
그리고 여전히 어려운 건 질의응답에 대한 것과 그다음에 Paraphrase.
그러니까 어떤 문장을 써놓고 그 문장이랑 같은 뜻이지만 다른 형태로 표현하는 그 과정도 기계가 쉽게 하지 못하는 작업 중에 하나입니다.
그리고 아주 긴 문장을 한 단어로 요약한다든지 혹은 한 문장으로 요약하는 Summarization task.
그리고 근래에 인공지능 스피커들이 많이 나오긴 했지만, 여전히 대화를 할 수 있는 기계는 완벽하다고 말하기 어렵습니다.
그래서 이 중에서 모든 걸 다 자세히 말씀드리지는 않겠지만, 이 여러 task들 중에 몇몇은 여러분에게 좀 더 자세히 이번 시간에 말씀드리도록 하겠고요.
보시면 아시겠지만 워낙 다양한 분야가 있기 때문에 각각의 분야를 아주 깊이 아는 건 많은 시간과 노력이 필요하고요.
여러분이 혹시 관심 있는 분야가 있다면 한번 깊이 알아보시는 것도 좋을 것 같습니다.
그러면 자연어 처리가 왜 이렇게 어려운 문제가 되는지에 대해서 말씀을 드리도록 하겠습니다.
사실 사람이 하는 언어라는 게 많은 경우에 모호성이 있습니다. 우리가 대충 얘기해도 사람은 되게 잘 이해하는 경우가 있는데요.
우리가 대충 얘기한다는 게 정확하게 말을 표현하지는 않지만, 사람은 어떻게 되는지는 설명하기가 어렵지만, 잘 아는 사람이 되게 모호하게 얘기하더라도 그 의미를 완전히 파악하기도 하고요.
그리고 또 다른 이슈는 우리가 한국어를 모국어로 쓰고 있긴 하지만, 우리가 사용하는 언어들 중에 비문도 아주 많고요.
그러니까 문법적으로 완벽하지 않은 문장도 많고, 단어를 잘못 쓰는 경우도 있습니다.
그렇지만 그런 잘못 쓰는 상황에서도 사람들은 ‘이 context에서 이 사람이 이 용어를 잘못 썼지만, 이런 뜻으로 했겠거니.’ 하고 되게 잘 이해하는 그런 특성이 있습니다.
그래서 모호성이라는 게 이럴 때는 이렇고 저럴 때는 저런 문제이기 때문에 그걸 일일이 기계에게 가르쳐주는 건 매우 어렵습니다.
그래서 여기 보여드린 문장들은 하나의 문장으로서 이런 뜻이 될 수도 있고 저런 뜻이 될 수도 있는 그런 여러 가지 예제를 보여드리고 있고요.
하나씩 여러분이 보시면 되겠지만 제가 두 번째 문장을 예로 설명 드리도록 하겠습니다.
동사가 무엇이냐에 따라서 이 문장의 뜻이 완전히 바뀝니다. 여러분이 만약에 Strike를 동사로 본다면 ‘선생님이 놀고 있는 아이를 때렸다.’ 이렇게 해석할 수 있고요.
여러분이 만약에 Idle을 동사로 본다면 Teacher Strikes, 그러니까 ‘선생님들이 파업을 해서 아이들이 놀고 있다.’ 이런 식으로도 해석이 가능합니다.
이건 영어를 예로 들어서 말씀을 드렸는데요. 이건 꼭 영어만의 문제는 아니고 모든 언어에서 이런 모호성이 아주 많이 보이는 문장을 실제로 많이 보게 됩니다.
그리고 또 어려운 이유는 몇 가지 말씀드리면, 우선 영어 기준으로 말씀드리도록 하겠습니다.
첫 번째 어려운 이유는 모국어가 영어인 사람이라고 하더라도 많은 경우에 비문을 쓰기도 하고요.
혹은 요즘과 같은 소셜 네트워크 환경에서 일부러 문법적으로 맞지 않는 문장을 쓰는 경우도 많습니다.
그리고 이런 경우가 매우 빨리 변하기 때문에 이걸 다 해결한다는 게 쉽지 않다는 것이고요.
그리고 또 하나의 어려운 점은 분절을 하는 데 있어서 어려움이 있는데요. 여기서 보면 ‘the New York-New Heaven Railroad’ 이런 예제가 있습니다.
그런데 여러분이 만약에 New York이 도시 이름이고 New Heaven도 도시 이름이라는 걸 알면 두 번째처럼 분절을 할 수 있지만,
이런 식으로 단어가 연속으로 되어 있을 때 어디서 끊어 읽어야 되는지, 어느 단어와 어느 단어를 합쳐야 되는지 쉽지 않은 경우가 꽤 많습니다.
그리고 세 번째 어려운 점은 관용어구라고 할 수 있겠죠.
첫 번째 예로 보면 dark horse. 그래서 이 단어가 있었을 때 그냥 ‘검은 말’ 이런 식으로만 해석을 한다면, 이거의 실제 의미를 제대로 전달할 수 없겠죠.
그다음에 또 하나의 어려운 점은 신조어입니다. 그러니까 언어라는 게 매우 빠르게 변하고 있고 새로운 단어가 계속 나타나게 됩니다.
unfriend. 사실 friend는 ‘친구’라는 명사인데, 소셜 네트워크에서 friend가 일종의 동사처럼 ‘친구 맺다’로 사용이 되고, 당연히 친구를 끊는 걸 unfriend라고 하는 것이죠.
그런 unfriend라는 단어는 예전에는 없었는데 사회가 발전하면서 계속 생겨나게 되고요. 그런 단어는 매우 많습니다.
그리고 또 하나의 어려운 점은 여러분이 자연어 처리를 잘하기 위해서 언어만 이해해서는 안 되고 지식이 있어야 됩니다.
예를 들어서 이런 두 가지 문장이 있을 때 걸 제대로 해석하기 위해서는 Mary가 누구인지, Sue가 누구인지 알아야 됩니다.
그리고 많은 경우에 드라마 제목이 나올 수도 있고요. 여러분이 그 드라마를 모른다고 하면 역시 마찬가지로 그 자연어를 이해할 수 있다고 얘기할 수 없겠죠.
그리고 또 하나는 어떤 entity, 그러니까 어떤 요소를 얘기하는 데 있어서 좀 어려운 경우도 있습니다.
A Bug’s Life. 이런 건 3개의 단어 자체가 영화 하나를 나타내는 명사입니다. 그런데 그걸 만약에 모른다면 되게 어려울 수도 있겠죠.
그리고 Let It Be도 어떻게 보면 song title입니다. 그러니까 음악 노래의 제목인데, 이걸 모른다고 하면 마찬가지로 문장을 제대로 이해하는 게 매우 어렵겠죠.
그래서 이 모두를 아우르는 게 또 하나의 중요한 특징은 이 모든 게 되게 빨리 변한다는 것입니다.
그래서 영어를 잘못 쓰는 경우도 standard, 그러니까 표준에 맞지 않는 영어를 쓰는 방식도 매우 빠르게 변하고요.
그다음에 관용어도 빠르게 변하고요. 그리고 World knowledge, 지식체계도 빨리 변하기 때문에 그런 이유에서 사람의 자연어를 이해한다는 건 매우 어려운 일이 됩니다.
대신에 우리가 일상적으로 쓰는 말을 기계가 이해할 수 있도록 한다는 것이 대신에 인공지능의 다른 분야보다 더 재미있게 하는 요소가 될 수도 있을 것입니다.
그러면 지금부터는 자연어 처리의 대표적인 task, 작업들에 대해서 하나둘씩 말씀을 드리도록 하겠습니다.
첫 번째는 질의응답에 대한 것이고요. IBM이 Jeopardy라는 미국의 퀴즈쇼에 Watson이라는 기계로 참여해서 인간 챔피언들을 이긴 사건이 2011년도에 있었죠.
그때의 예를 한번 들어보도록 하겠습니다. 이건 실제 Jeopardy에서 나온 문제인데요. 여기 보시면 문제가 되게 어렵습니다.
문제의 특징이 뭐냐 하면, 여러분이 하나의 지식만 알면 안 되고요. 여러 개의 지식, 2개 이상의 지식을 동시에 알고 있어서 거기서부터 추론을 해야지만 답을 할 수 있는 것입니다.
WILLIAM WILKINSON, 이분은 한국 분들이면 당연히 잘 모르실 텐데 영국의 외교관이고요.
영국의 외교관이 이런 책을 썼습니다. 책 제목은 「왈라키아와 몰도비아 공국에 대한 설명」 이런 식의 책을 썼습니다.
그런데 이 책은 이 저자의 가장 유명한 소설에서 아이디어를 받았다. 그러니까 영감을 얻었다고 보시면 되겠습니다.
그래서 답은 뭐냐 하면, 오른쪽에 나와 있다시피 Bram Stoker입니다. 아시다시피 Bram Stoker는 「드라큘라」라는 소설의 작가고요.
여기서 보시다시피 왈라키아, 몰도비아가 루마니아 근처를 지칭하고 있고, 그게 「드라큘라」라는 소설의 배경이라는 걸 아셔야 됩니다.
그러니까 이 책에 대한 정보도 알아야 되고, 「드라큘라」의 저자도 알아야 되고, 여러 가지 지식을 가지고 있어야지만 풀 수 있는 문제입니다. 어떻게 보면 되게 어려운 문제겠죠.
그래서 질의응답은 여러 가지 경우가 있는데요. Factoid questions, 그러니까 사실관계에 대한 질문입니다.
조금 전에 보셨다시피 사실관계에 대한 질문은 많은 경우에 단답형으로 알 수가 있겠죠.
그러니까 ‘누가 뭘 했냐.’ 여기서 보시다시피 ‘칼로리가 몇이냐’ 이런 식의 질문은 단답형 하나로, 많은 경우에 명사 하나 혹은 명사인데 단어 여러 개로 답을 할 수 있겠죠.
그렇지 Factoid questions보다 더 어려운 건 narrative, 기술하는 문제입니다. 그러니까 ‘00를 설명해보시오.’ 그리고 질문 중에 ‘왜 이렇게 했습니까?’
그건 단순히 단어 한두 개로 표현할 수 있는 계제가 아니기 때문에 이런 경우에 매우 어렵습니다.
그래서 현실적으로 현재 나와 있는 질의응답 시스템 같은 경우에 첫 번째 Factoid questions에 대한 질의응답 시스템은 많이 존재하지만,
narrative questions에 대해서는 아직 응답을 제대로 할 수 있는 기계학습 혹은 자연어 처리 알고리즘이 많이 존재하지 않는다고 이해하시면 되겠습니다.
그리고 또 하나 재미있는 작업은 Information Extraction입니다. 이건 근래에 메일 시스템에서 어느 정도 구현이 된 것인데요.
제가 만약에 특정 교수 분과 미팅에 대한 메일을 주고받는다고 했을 때
이 중에서 장소와 시간에 대한 정보를 자동으로 뽑아서 개인 달력의 entry로 자동으로 만들어주는 그런 예가 Information Extraction의 예입니다.
그래서 이벤트 제목, 날짜, 언제부터 언제까지 그리고 위치가 어디인지. 이런 것들을 이메일 텍스트만 보고 자동으로 생성해주는 작업을 Information Extraction이라고 볼 수가 있습니다.
그리고 이건 아주 관련이 깊은 건데, 관계를 뽑아내는 겁니다. Information 중에서 특별히 관계에 대한 것입니다.
하나의 예를 보시면 이건 일반 사람이 쓴 회사에 대한 보고서입니다. 그런데 그냥 사람이 이해할 수 있는 자연어로 기술이 되어 있죠. 글로부터 이런 여러 가지 관계 정보를 알아내는 것입니다.
그러니까 IBM과 Location과의 관계. IBM은 어디에 있느냐? 뉴욕에 있고, IBM이랑 Founding Date와의 관계. 이런 것들을 알아내는 것이죠.
결국에 이건 세 가지 요소로 표현이 됩니다. A, B 그리고 A, B와의 관계로 표현이 되겠죠.
그래서 IBM과 1911은 설립연도라는 관계로 맺어진다. 이런 식으로 이런 관계들을 자연어에서 자동으로 찾아내는 task를 Relation Extraction이라고 할 수 있겠죠.
이건 위키피디아 페이지를 보고 기계가 자동으로 수많은 관계를 알아내는 게 과연 가능할까? 이것에 대한 내용입니다.
Standford는 The Leland Standford Junior University의 약자. 얘네 둘은 똑같은 거고, 캘리포니아에 있고.
이런 것들을 어떻게 하면 이런 긴 문장에서 자동으로 알아낼 수 있을까. 이게 Relation Extraction 문제라고 보시면 되겠습니다.
그리고 자연어에서 정보를 뽑아내는 것과 감정에 대한 분석을 동시에 수행하는 예제가 이렇게 있습니다.
예를 들면 쇼핑 사이트에 가보시면 어떤 카메라에 대해서 여러 가지 리뷰가 있을 텐데요.
그런데 리뷰가 많은 경우에 ‘카메라가 좋다, 나쁘다.’ 이 얘기뿐만 아니라 기능별로, 그러니까 특성별로 다 되게 얘기합니다. ‘값은 싸지만 기능은 별로다.’ 이런 식으로 얘기할 수 있습니다.
그래서 사람이 쓴 자연어 문장으로부터 Attributes, 어떤 속성별로 좋은 평인지 나쁜 평인지를 찾아내고요. 그리고 거기에서의 키워드를 이렇게 뽑아낼 수 있는지.
그게 Information Extraction과 Sentiment Analysis를 같이 결합한 문제라고 보실 수 있겠고요.
감정 분석은 되게 다양한 예제가 있습니다. 단순히 어떤 영화 리뷰가 positive한지 negative한지, 긍정적인지 부정적인지만 알아내는 게 목적일 수도 있고요.
또 밑에는 재미있는 연구 결과인데요.
소비자 확신, 그러니까 소비자가 얼마나 소비를 할 건지에 대한 설문조사를 원래 전통적으로 해야 되지만, 트위터의 사람들의 감정을 통해서 예측할 수도 있다. 이걸 보여준 내용이고요.
그러니까 트위터 상에 존재하는 수많은 트윗들을 기계가 자동적으로 분석해서 실제 설문을 하지 않고 과연 소비자들이 어떤 생각을 하고 있는지 알아내는 그런 작업이라고 볼 수 있겠습니다.
아시다시피 웬만한 쇼핑 사이트를 가보시면 사람들이 자유롭게 쓴 리뷰 글로부터,
그러니까 각 속성별로 이 사람이 어떤 스코어를 주고 있는지 그리고 그 스코어를 주면서 키워드들은 무엇인지를 뽑아내는 기능이 현재 일부 구현이 되어 있습니다.
그래서 Sentiment Analysis를 자세히 보면, 이 Sentiment Analysis는 여러 가지 다른 이름을 가지고 있습니다.
Opinion mining, 그러니까 의견을 mine 한다. 혹은 extraction이라고도 얘기하고요. 그다음에 주관적인 분석이라고도 얘기합니다. 그래서 다양한 이름으로 불리고요.
그래서 Sentiment Analysis는 그냥 하나의 task가 아니라 되게 다양한 task가 있는데, 단순히 긍정/부정, 그 둘만 찾아내는 게 목적일 수도 있고요.
혹은 별점으로 해서 1점부터 5점까지 과연 몇 점이냐? 그걸 알아내는 것도 있을 수 있겠고요.
그다음에는 어떤 감정의 대상이 뭐고, 감정의 근원이 뭐고, 여러 Attribute별로 어떤 복잡한 반응을 가지고 있는지를 다 찾아내는 건 훨씬 어려운 task가 되겠죠.
그래서 Sentiment Analysis도 어느 정도 많이 진행되긴 했지만, 완벽히 되고 있다고 보기는 어렵습니다.
그래서 왜 어려운지 몇 가지 예제와 함께 보시면, Sentiment를 알아내기 위해서는 되게 미묘한 점이 있습니다.
첫 번째 예제를 보시면, 이건 Dorothy Parker라는 평론가가 Katherine Hepburn이라는 배우에 대해서 평을 한 것입니다.
그런데 어떻게 평을 했느냐 하면, ‘그녀는 감정의 표현이 A부터 B까지 되게 화려했다.’ 이런 식의 평을 했습니다.
그런데 언뜻 들으면 되게 좋은 뜻인 것 같지만 A에서 B까지 아주 감정을 풍부하게 표현했다. 그건 결국에 비꼬는 내용입니다.
그러니까 가수한테는 ‘성량이 되게 풍부해서 도부터 솔까지 자유롭게 노래를 불렀다.’ 이런 식으로 좀 비꼬는 내용이죠. 이건 사람조차도 positive인지 negative인지 알기도 어렵고요.
그리고 많은 경우에 사람들이 결국에 부정적인 얘기를 하고 싶은데 처음에 그냥 좋은 얘기를 이렇게 나열하는 것이죠. ‘영화 괜찮고 여러 가지가 좋았는데 견딜 수가 없었다.’ 이런 식으로 쓰는 경우.
그래서 단순히 어떤 단어가 쓰였는지만 보면, 좋은 단어가 많이 쓰였기 때문에 이게 positive라고 생각할 수 있지만 실제로는 그렇지 않다는 거고요.
그리고 순서에 따라서도 영향이 있는데, ‘키아누 리브스는 평소처럼 특별한 게 없었고, 놀랍게도 매우 뛰어난 배우인 이 사람이 별로 안 좋았다. 그래서 놀랐다.’
그거는 뭐냐 하면 되게 잘해야 되는 배우가 별로였다는 얘기죠.
그래서 결국에는 negative한 평인데, 이것도 마찬가지로 긍정적인 단어와 부정적인 단어의 순서에 따라서 의미가 많이 바뀔 수 있다. 이런 몇 가지 예제를 보여주고 있습니다.
그래서 ‘자연어 처리가 쉽지만은 않구나.’ 여러분이 많이 느끼시지 않을까 생각합니다.
그리고 Named Entity Recognition, NER이라고 말씀을 드렸죠? 여기서의 목적은 뭐냐? 목적은 뭐냐 하면, 주어진 문장에서 여기서 보신 예제와 같이 고유명사를 찾아내는 것입니다.
그리고 그 고유명사가 사람인지, 날짜인지, 위치인지 혹은 단체인지를 알아내는 것이죠.
Labor라고 하면 그냥 ‘노동’ 이런 식으로 여러분이 이해할 수도 있지만, 이 context상에서는 ‘정당’이라는 뜻이죠. 그런 식의 주변 context를 봐서 이게 과연 고유명사인지 알아내는 거고요.
고유명사인지 알아내는 게 왜 중요하냐 하면, 여러분이 뽑혀진 고유명사에 따라서 문서로 정리, indexing을 할 수도 있고요.
그다음에 여러분이 어떤 회사와 혹은 product, 상품에 대한 감정을 하려면 이런 것들을 기본적으로 다 찾아내야 되고요.
그다음에 Information Extraction에서도 필요하고, 질의응답에서도 필요합니다. 어떻게 보면 가장 기본적인 task 중에 하나겠죠.
그리고 또 하나 중요한 문제 중에 하나가 Part-of-Speech Tagging입니다. 이건 좀 전에 말씀드렸다시피 품사에 대한 얘기입니다.
그래서 문장이 주어지면 각각의 문장을 구성하는 단어들의 품사를 알아내는 것이고요.
그래서 아시다시피 명사는 고유명사도 있고 일반명사도 있고요. 그리고 동사 같은 경우에는 일반적인 동사도 있지만 이렇게 can, had 이런 보조동사도 있고요.
이런 것들을 알아내는 과정이라고 보시면 되겠습니다.
그래서 Plays, well, with, others라는 문장이 주어지면 과연 Plays가 뭔지 well이 뭔지를 알아내는 거고요.
밑에 보시면 어렵게 생긴 이 단어가 각각의 태그입니다. VBZ가 뭘 나타내는지는 이 밑에 주어진 웹사이트에 가셔서 확인하셔야 되는데요.
간단히만 말씀드리면 동사고요. 그런데 동사로만 끝나는 게 아니라 3인칭 단수 현재형 동사다. 그런 식으로 구체적으로 알아내는 과정이죠.
그래서 이 태그의 의미가 안 와 닿으실 수도 있는데, 그런 분들은 이 웹사이트에서 각각의 태그가 의미하는 게 무엇인지.
실제로는 품사라는 게 종류가 매우 많습니다. 여기서 보시다시피 Plays가 이런 의미일 수도 있고 이런 의미일 수도 있다.
그러니까 복수형 명사일 수도 있고 좀 전에 말씀드렸다시피 3인칭 현재형 동사일 수도 있고요. 그런 것 중에서 동사였다. 이런 걸 지금 표현해주고 있고요.
그래서 Part-of-Speech Tagging이 왜 어렵냐 하면, 영어 같은 경우에 거의 모든 단어가 하나 이상의 품사를 가지고 있습니다.
그래서 that을 예로 들면, 이건 접속사일 수도 있고 지시대명사일 수도 있고 부사일 수도 있습니다.
그렇기 때문에 이게 어떻게 쓰이느냐? 주변 단어랑 같이 봐서 결정을 해야 되기 때문에 그렇게 쉽지만은 않은 문제라고 보시면 되겠습니다.
그리고 또 하나 task를 소개시켜드리면, 구조에 대한 Parsing입니다. 이건 문장이 주어지면 문법적인 구조를 알아내는 과정이라고 보시면 되겠습니다.
하나의 예를 보여드리도록 하겠습니다. ‘I saw a girl with a telescope.’ 이런 문장이 주어졌을 때 이건 두 가지로 해석이 됩니다.
만약에 with a telescope가 saw랑 연결이 됐다고 해보세요. 그 경우에는 ‘나는 저 소녀를 망원경으로 봤다.’라는 뜻입니다.
그런데 만약에 telescope가 girl에 연결돼 있다고 하면 ‘나는 망원경을 가지고 있는 소녀를 봤다.’ 이런 뜻이 됩니다.
그래서 문장 구조를 알아낸다는 게 문장의 뜻을 정확히 이해하는 데 매우 중요한 task라고 이해하시면 되겠고요.
그래서 이 문장 구조를 어떻게 나타내느냐? 그걸 크게 보면 두 가지 관점에서 볼 수 있는데요.
한 가지 관점은 구성 요소로 나누는 것입니다. 문장이 있으면 with a telescope는 구조구, 전치사구입니다.
그래서 문장이 주어지면 그걸 여러 개의 구로 나누고, 다시 그 구는 또 여러 개의 구성요소로 나누고.
이게 Constituency라고 보이는 view고요. Dependency는 뭐냐 하면, 단어 사이의 종속관계입니다.
그래서 I, 주어는 saw라는 동사에 종속이 되어 있고, a는 girl이라는 명사에 종속되어 있습니다. 이런 종속관계를 알아내는 관점으로 문장 구조를 해석한다고 보실 수도 있습니다.
그래서 이 두 가지는 결국에 같은 얘기인데, 이렇게도 해석을 할 수 있고 저렇게도 해석할 수 있다고 이해하시면 되겠고요.
좀 더 자세히 보면 첫 번째는 구성요소별로 Parsing, 그러니까 이해를 하는 거죠. 구조를 이해하는 건데요.
그건 어떤 구가 어떤 구성, 하나로서의 구성 요소인지를 어떻게 판단하느냐? 그걸 두 가지 특성을 통해서 판단할 수 있다는 예제를 보여드리고 있습니다.
그러니까 여기 보시면 about drugs라는 구가 있고요. to the children이라는 구가 있습니다.
그런데 이 두 개의 문장을 보시면 이 두 개의 구는 하나가 앞에 나와도 되고 하나가 뒤에 나와도 됩니다. 그러니까 영어 문법 상 둘이 다 맞는 경우죠.
그런 식으로 어떤 구성요소가 움직일 수 있다, 분배가 될 수 있다고 하면 ‘얘는 구성요소다.’ 이렇게 정의할 수도 있다는 거고요.
또 하나는 치환 관점에서 볼 수 있습니다. 어떤 구성요소가 다른 구성요소로 계속 치환이 가능하다. 그러면 어떻게 보면 그게 하나의 구성요소로 Parsing이 돼야 한다고 이해할 수도 있겠죠.
그리고 Dependency 같은 경우에 마찬가지로 각각의 단어가 어디에 종속되어 있느냐?
그래서 on이라는 전치사가 동사에 연결이 되는지 혹은 그 앞에 있는 명사에 연결이 되는지에 따라서 의미가 다 바뀌기 때문에
그런 것들의 종속관계를 파악하는 것도 아주 중요한 Parsing의 view라고 보시면 되겠습니다.
그리고 그다음 task입니다. 그다음 task는 단어의 의미에 대한 task고요. 단어의 기본 구성, 그러니까 단어의 요소는 여러 가지 의미를 가지고 있습니다.
많은 경우에 영어 같은 경우는 한 단어가 하나의 뜻만 가지는 경우는 거의 없습니다.
bank를 한번 예로 들어보죠. bank가 ‘은행’일 수도 있지만 ‘강둑’이라는 뜻으로 쓰일 수도 있습니다.
그러니까 결국에 word meaning, sense는 언어의 뜻을 얘기하는 거고, 이게 과연 어떤 언어의 뜻으로 활용됐는지를 얘기하는 거고요.
그래서 첫 번째로 살펴볼 게 Homonymy입니다. 이건 동형이의어라고 말씀드릴 수 있는데요. bank가 대표적인 예입니다.
여기서는 bank라는 하나의 단어가 두 가지 서로 다른 뜻으로 해석된다고 보기보다는
bank가 원래 이런 근원의 단어가 있었고 이런 근원의 단어가 있었는데, 이 둘이 어떻게 보니까 알파벳이 같더라. 이렇게 보시는 게 더 타당합니다.
그러니까 단어의 유래도 완전히 다르고 뜻도 완전히 다른, 그러니까 형태는 똑같지만 뜻은 완전히 다른 그런 것이 Homonymy가 되겠고요.
이건 자연어 처리 분석에 대해서 여러 가지 어려운 점이 있습니다. 그래서 bat care라고 하면 bat이 ‘방망이’를 얘기하는 건지 혹은 ‘박쥐’를 얘기하는 건지 되게 어렵겠죠.
그래서 그거에 따라서 번역도 되게 어려워질 수 있겠고요. 그러니까 bat를 동물로 번역할지 혹은 ‘방망이’로 번역할지.
그리고 또 하나의 예는 Text-to-Speech, 그러니까 단어로부터 말을 만들어낼 때도 어렵습니다.
똑같은 bass지만 [베이스]라고 얘기해야 될 필요가 있고요. 혹은 [바스]라고 얘기해야 될 때가 있습니다.
그러니까 지금 말씀드린 내용은 이 단어들은 하나의 단어가 여러 뜻을 가지고 있다고 해석하기보다는
독립된 단어들이 존재했는데 이 독립된 단어들이 어떻게 보니까 알파벳이 같더라. 그걸 Homonymy라고 한다고 보시면 되겠습니다.
그리고 Polysemy는 말 그대로 단어가 여러 뜻을 갖는 경우입니다. 하나의 단어가 여러 뜻을 갖는 경우.
좀 전에도 말씀드렸다시피 영어 단어 중에 딱 하나의 뜻만 가지는 경우는 거의 없습니다. 모든 단어가 여러 가지 뜻을 가지고 있죠.
그냥 단적인 예로 보시면, 영어에서 그런 경우가 좀 많은데요. Jane Austen이라고 쓰면 이게 저자를 얘기할 수도 있고 혹은 그 저자의 작품을 얘기할 수도 있습니다.
예를 들면 저희가 어떤 지명을 얘기할 때 말 그대로 지명일 수도 있고 그 지명을 가진 프로 팀을 얘기하는 걸 수도 있고요.
그런 식으로 우리가 일반적으로 사전을 찾았을 때 여러 뜻이 있는 경우를 제외하고 일반적인 단어임에도 불구하고 여러 뜻으로 쓰이는 경우가 되게 많다는 겁니다.
그리고 Synonyms이라는 건 동의어입니다. 그러니까 같은 뜻을 가진 다른 말이죠. couch랑 sofa는 동의어가 되겠죠. 이런 식으로 되어 있는 걸 찾아내는 게 쉽지 않은 문제라는 얘기고요.
그런데 또 한편으로는 뉘앙스라는 게 달라질 수 있습니다. 두 단어가 동의어이긴 한데 이럴 때는 동의어인데 또 다른 경우에는 동의어를 안 쓰고 뉘앙스가 좀 달라지는 경우가 있습니다.
그래서 첫 번째 예제를 보시면, big이랑 large가 많은 경우에 같이 쓰일 수 있습니다. How big, How large is that plane? 이렇게 쓰일 때 big이랑 large는 똑같은 거죠.
똑같은 경우지만 만약에 sister랑 같이 사용을 하면, 그 sister가 언니인지 아니면 나보다 그냥 큰 자매인지에 따라서 달라지죠.
그래서 똑같은 동의어라도 이럴 때는 동의어가 되고 이럴 때는 동의어가 아닐 수도 있다. 그게 분석이 어려운 이유 중에 하나가 되겠고요.
또 다른 것은 반대말입니다. 그러니까 정확히 반대의 의미를 가지는 경우죠. long/short, fast/slow 이런 것들이 다 반대어가 되겠고요.
그런데 또 재미있는 특징은 문법적으로는 얘네들이 똑같습니다. 그래서 long을 써야 될 때 short를 쓰면 그게 문제가 전혀 되지 않죠.
그런데 문법적으로 완전히 같은데 단어만 반대인 경우가 많다. 그게 재미있는 현상이라고 할 수 있겠습니다.
그리고 또 다른 예제는 기계번역입니다. 기계번역은 되게 오랫동안 자연어 처리에서 연구된 분야인데, 근래에 기계번역의 아주 놀라운 발전이 있었습니다. 그리고 그 발전은 딥러닝에 기반했고요.
사람 입장에서는 기계번역이라는 게 되게 어렵습니다. 그래서 여러분이 영어로 작문을 한다든지 영어 문장을 한글로 쓴다든지 그게 되게 어려운 작업인데, 상대적으로 기계는 쉽게 해결하고 있고요.
요즈음 여러분이 많이 쓰시는 구글 번역기 같은 경우에는 구글 번역기의 모델 이름이 GNMT라고 불립니다.
그러니까 Google Neural Machine Translation system이라고 불리고요. 이건 2016년도 9월에 발표가 되었고요.
Neural이라는 단어가 붙은 이유는 이게 기본적으로 깊은 신경망, 그러니까 근래에 사람들이 얘기하는 딥러닝 모델에 기반하고 있다고 보시면 되겠습니다.
여기 예제는 중국어 문장이 들어왔을 때 기존 방법으로 하면 파랑색처럼 보이는데,
자신들이 제안한 방법으로 했더니 녹색 예제처럼 나왔고, 실제 사람보고 번역하라고 시켰더니 구글 번역기 성능이 더 좋았다. 이걸 예제로 보여드린 거고요.
그리고 뒤에 그림은 이 사람들이 구글에서 제안한 GNMT 모델의 개략적인 모습입니다.
여기서는 너무 깊은 얘기이긴 하지만 기본적으로 Sequence-to-Sequence라는 모델을 기반으로 했고,
attention mechanism을 활용해서 아주 놀라운 성능의 기계 번역기가 나오기 시작했다고 이해하시면 되겠습니다.
혹시 이 알고리즘에 관심이 많으시면 이걸 구현한, 그러니까 이 시스템이 논문으로 출판이 되었고 그 논문을 기반으로 해서 많은 사람이 구현을 했습니다.
그래서 구현된 코드를 받아서 여러분이 한번 테스트를 해보실 수도 있습니다. 그러기 위해서는 딥러닝에 대한 공부가 필요하다고 할 수 있겠죠.
그리고 또 다른 아직도 어려운 문제 중에 하나가 요약입니다. 문서의 요약입니다.
그러니까 주어진 문서가 있을 때 제 의도대로, 유저가 원하는 방향대로 짧게 만들어주는 게 Text Summarization이고요.
많은 경우에 Single-document summarization이 필요한 경우가 있습니다. 아주 긴 기사가 있을 때 그걸 한 문장으로 요약한다든지. 그게 Single-document summarization이라고 할 수 있고요.
그리고 또 이것보다 더 어려운 문제는 Multiple-document summarization입니다. 그러니까 여러 문서를 참조해서 요약을 하는 것이죠.
이건 일종의 여러분이 리포트를 쓰는 상황을 보시면 되겠습니다.
리포트 주제가 ‘간디의 일생에 대해서 한번 써라. 요약을 해봐라.’ 이런 식의 문제가 주어졌다고 하면,
여러분이 하나의 텍스트 소스만 보는 게 아니라 여러 텍스트를 봐서 그분의 일대기를 쓰게 되겠죠. 그런 경우에는 훨씬 어렵다고 할 수 있겠고요.
그래서 사실에 대한 요약뿐만 아니라 많은 경우에는 스토리 진행 상태에 대한 요약이 필요할 수 있습니다.
예를 들면 북한과 남한이 여러 평화를 위한 일들을 진행하고 있는데, 올해 초부터 나온 기사부터 시작해서 지금까지 나온 기사를 스토리별로 요약을 하자.
그동안 무슨 일이 있었는지. 그런 것도 Multiple-document summarization의 예제라고 할 수 있겠습니다.
실제로 Text Summarization은 여러 가지 형태로 분류할 수 있겠고요.
Generic, 일반적인 요약은 그냥 말 그대로 document가 주어지면 그걸 대표하는 문장 하나 혹은 5개 미만의 문장으로 요약하는 것이 될 수 있고요.
그다음에 Query-focused summarization은 유저가 어떤 질의를 주면 그거에 기반해서 요약하는 것입니다.
영화를 요약할 때도 인물 중심으로 요약할 수도 있고 아니면 특정 사건 중심으로 요약할 수도 있고 아니면 인물 간의 관계 혹은 특정 인물 관점에서의 요약.
이런 식으로 여러 가지 summarization을 할 수 있겠죠. 이 summarization이랑 질의응답 task랑은 아주 밀접한 관계가 있는 경우가 많습니다.
그리고 이 두 가지는 summarization을 어떻게 수행하느냐에 따라 두 가지 방식으로 나뉩니다.
Extractive 방식이라는 건 뭐냐 하면, 우리가 어떤 문서를 summarization 할 때 주어진 문서 중에 특정 구 혹은 단어를 뽑아가면서 요약하는 거고요.
Abstractive summarization은 전체 글을 다 이해한 후에 그 글을 하나로 표현하는, 요약하는 방법을 Abstractive summarization이라고 할 수 있겠죠.
이 두 가지 summarization task 중에서 두 번째 것이 더 어렵습니다.
그러니까 첫 번째 거는 각 문장의 중요도를 여러분이 파악한 다음에 가장 중요하다고 생각되는 문장을 뽑아내는 식으로 요약할 수도 있겠지만,
Abstractive summarization 방법은 기본적으로 글을 다 이해하고, 그 글에서 사용된 단어뿐만 아니라 새로운 표현 단어를 활용해서 요약하는 과정을 Abstractive summarization이라고 합니다.
여러분이 실제 환경에서 Text Summarization이 활용되는 예제를 보실 수 있는데요.
Snippets라고 해서 여러분이 만약 구글 검색을 하다 보면, 주어진 키워드에 대해서 여러 가지 document가 검색됩니다.
그런데 각각의 문서 링크 외에 그 밑에 조그맣게 문서의 주어진 query에 대한 정보가 어떻게 요약되어 있는지 어떻게 나타나 있는지를 짧게 요약한 부분이 많이 존재하는데요.
그런 것도 다 자동적으로, 그러니까 원래 텍스트를 요약해서 return 하는 경우라고 할 수 있겠죠.
많은 경우에 어떤 문서로 가면 그 문서에 두꺼운 글씨로 쓰여 있는 경우라든지 혹은 제목, 소제목 혹은 그런 게 전혀 없다고 하면 첫 번째 문장 혹은 마지막 문장에 좋은 요약이 되는 경우가 많죠.
그런 여러 가지 룰들을 활용해서 특정 웹페이지를 요약한 걸 보여드리고 있다고 보시면 되겠습니다.
오늘 이 시간에는 자연어 처리 기초에 대해서 말씀드리고, 그게 왜 어려운지 말씀드렸고 그리고 자연어 처리에 여러 task들이 있다고 하나하나씩 말씀을 드렸습니다.
어떻게 보면 넓게 소개한 강좌라고 할 수 있고요. 지금 하나하나씩 소제목으로 달려 있는 task, 작업들은 그 자체로도 나의 소분야이고요.
그리고 그 분야를 해결하기 위해서 정말 수많은 논문들이 출판되어 있고 책들이 존재하게 됩니다.
오늘 말씀드린 내용은 여러분에게 자연어 처리라는 학문을 소개시켜드리고 여러분의 흥미를 끌게 하기 위해서 구성이 되었고요.
혹시라도 자연어 처리에 더 관심이 많으시다면, 자연어 처리에 특화된 수업이라든지 혹은 그 자료를 더 공부하시면 더 많은 이해를 얻을 수 있을 것 같습니다.
그러면 오늘 강의는 여기서 마치도록 하겠습니다.